// 1] Mathematical Functions
//  -> Header file = <cmath>
#include<iostream>
#include<cmath>
using namespace std;

int main()
{
  cout << sqrt(64) << endl;
  cout << round(2.6) << endl;
  cout << log(2);
  return 0;
}



// 2] Program Structure in CPP
/*
Divided into 3 sections
1. Standard Libraries
2. Main Function
3. Function Body
*/



// 3] User Defined Functions
/*
syntax :
  return_type function_name( params )
  {
    // function body
  }
*/



// Write a pragram with function of adding 2 numbers
#include<iostream>
using namespace std;

int sum(int a, int b)
{
    return a+b;
}

int main()
{
    int a, b;
    cout << "Enter two numbers : ";
    cin >> a >> b;
    cout << "\nThe sum of " << a << " and " << b << " is : " << sum(a,b);
  return 0;
}



// Write a pragram with function of retruning square root
#include<iostream>
#include<cmath>
using namespace std;

int square_root(int a)
{
    return sqrt(a);
}

int main()
{
    int a;
    cout << "Enter a number : ";
    cin >> a;
    cout << "\nThe square root of " << a << " is : " << square_root(a);
  return 0;
}



// 4] Function prototype
/*
  If we want to define a function after the function call,
  we need to use the function prototype.
*/



// 5] Recursive functions
/* Function calling itself means a recursive function
  (Note : There should be a point where the recursion stops)
*/



// Write a program to print fibonacci series using recurion
#include <iostream>
using namespace std;

int fib(int x) {
   if((x==1)||(x==0)) {
      return(x);
   }else {
      return(fib(x-1)+fib(x-2));
   }
}

int main() {
   int x , i=0;
   cout << "Enter the number of terms of series : ";
   cin >> x;
   cout << "\nFibonnaci Series : ";
   while(i < x) {
      cout << " " << fib(i);
      i++;
   }
   return 0;
}



// Write a program for factorial using recursion
#include<iostream>
using namespace std;

int factorial(int n);

int main() {
  int n;
  cout << "Enter a positive integer: ";
  cin >> n;
  cout << "Factorial of " << n << " = " << factorial(n);
  return 0;
}

int factorial(int n) {
  if(n > 1)
    return n * factorial(n - 1);
  else
    return 1;
}
